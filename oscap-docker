#!/bin/bash
#
# Copyright (c) 2014--2015 Šimon Lukašík
#
# This software is licensed to you under the GNU General Public License,
# version 3 (GPLv3). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv3
# along with this software; if not, see http://www.gnu.org/licenses/gpl.txt
#

set -e -o pipefail

function usage(){
	echo "oscap-docker -- Tool for running oscap within docker container or image."
	echo
	echo "Usage:"
	echo
	echo "# oscap-docker image IMAGE-NAME OSCAP-ARGUMENTS"
	echo "	Scan a docker image."
	echo "# oscap-docker image-cve IMAGE-NAME [--results oval-results-file.xml [--report report.html]]"
	echo "	Scan a docker image for known vulnerabilities."
	echo "# oscap-docker container CONTAINER-NAME OSCAP-ARGUMENTS"
	echo "	Scan a running docker container of given name."
	echo "# oscap-docker container-cve CONTAINER-NAME [--results oval-results-file.xml [--report report.html]]"
	echo "	Scan a running container for known vulnerabilities."
	echo
	echo "See \`man oscap\` to learn more about OSCAP-ARGUMENTS"
}

function docker_mount_image(){
	local image_name=$1
	local target_dir=$2
	docker save $image_name | /usr/local/bin/undocker.py -o $target_dir $image_name
}

function docker_umount_image(){
	rm -r $1
}

function docker_container_pid(){
	local container_name="$1"
	docker inspect --format '{{.State.Pid}}' $container_name
}

function docker_container_root(){
	local container_name="$1"
	local pid=`docker_container_pid $container_name`
	local root="/proc/$pid/root"
	echo $root
	test -d $root
}

function oscap_chroot(){
  local target=$1; shift
  local image=$1; shift
  local path=$1; shift
  local oscap_arguments="$*"

  # Learn more at https://www.redhat.com/archives/open-scap-list/2013-July/msg00000.html
  export OSCAP_PROBE_ROOT="$(cd $path; pwd)"
  export OSCAP_PROBE_OS_NAME="Linux"
  export OSCAP_PROBE_OS_VERSION=`uname --kernel-release`
  export OSCAP_PROBE_ARCHITECTURE=`uname --hardware-platform`
  export OSCAP_PROBE_PRIMARY_HOST_NAME="docker-$target-$image"
  oscap $oscap_arguments
}

function query_cpe_in_chroot(){
	local image_root=$1; shift
	local cpe=$1
	local cpe_dict=/usr/share/openscap/cpe/openscap-cpe-oval.xml
	oscap_chroot "image" "noname" $image_root oval eval --id $cpe $cpe_dict 2>&1 > /dev/null
}

function cve_definitions_uri(){
	local name=$1; shift
	local image_root=$1; shift
	if [ -f $image_root/etc/issue ]
	then
		etc_issue_path=$image_root/etc/issue
		local os=$(cat $etc_issue_path | head -n +1 | awk '{print $1}')
		case $os in
		  Debian)
		  	OS_ID=debian
		  	version=$(cat $etc_issue_path | head -n +1 | awk '{print $3}' | cut -d '.' -f 1)
			case $version in
				4)
					OS_VERSION_ID=4.0
				;;
				5)
					OS_VERSION_ID=5.0
				;;
				*)
					OS_VERSION_ID=$version
				;;
			esac
		  ;;
		  CentOS)
		  	OS_ID=centos
		    local version=$(cat $etc_issue_path | head -n +1 | awk '{print $3}')
		    OS_VERSION_ID=linux.${version%%.*}
		  ;;
		  Ubuntu)
		  	OS_ID=ubuntu
		    local version=$(cat $etc_issue_path | head -n +1 | awk '{print $2}')
		    local major_version=$(echo $version | cut -d '.' -f 1)
		    local minor_version=$(echo $version | cut -d '.' -f 2)
		    OS_VERSION_ID="${major_version}.${minor_version}"
		  ;;
		  *)
		  	echo "could not find mite file because ${os} is not recognized"
		  	exit 1
		  ;;
		esac
	else
		echo "cannot find mitre file because no $image_root/etc/issue"
		exit 1
	fi
	echo "http://oval.mitre.org/rep-data/$MITRE_VERSION/org.mitre.oval/p/platform/$OS_ID.$OS_VERSION_ID.xml"
}

module=$1; shift
case $module in
image)
	image_name=$1; shift
	oscap_arguments="$*"
	image_root=`mktemp -d docker.XXXXXX`
	docker_mount_image $image_name $image_root
	oscap_chroot "image" $image_name $image_root $oscap_arguments
	docker_umount_image $image_root
	;;
image-cve)
	image_name=$1; shift
	oscap_oval_eval_arguments="$*"
	image_root=`mktemp -d docker.XXXXXX`
	cve_oval=$image_root/cve-oval.xml
	docker_mount_image $image_name $image_root
	cve_definitions_uri=`cve_definitions_uri $image_name $image_root`
	echo "using ${cve_definitions_uri} for cve defitions"
	wget --no-verbose -O "$cve_oval" $cve_definitions_uri
	oscap_chroot "image" $image_name $image_root oval eval $oscap_oval_eval_arguments $cve_oval
	docker_umount_image $image_root
	;;
container)
	container_name=$1; shift
	oscap_arguments="$*"
	container_root=`docker_container_root $container_name`
	oscap_chroot "image" $container_name $container_root $oscap_arguments
	;;
container-cve)
	container_name=$1; shift
	oscap_oval_eval_arguments="$*"
	container_root=`docker_container_root $container_name`
	cve_oval=`mktemp`
	cve_definitions_uri=`cve_definitions_uri $container_name $container_root`
	wget --no-verbose -O "$cve_oval" $cve_definitions_uri
	oscap_chroot "container" $container_name $container_root oval eval $oscap_oval_eval_arguments $cve_oval
	rm $cve_oval
	;;
*)
	usage
	exit 1
	;;
esac

